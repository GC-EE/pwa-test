import { useState, useEffect, useCallback } from 'react';

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

interface PWAInstallState {
  isInstallable: boolean;
  isInstalled: boolean;
  isStandalone: boolean;
  isIOS: boolean;
  isAndroid: boolean;
  isChrome: boolean;
  isSafari: boolean;
  showInstallPrompt: boolean;
  installPrompt: BeforeInstallPromptEvent | null;
}

export function usePWAInstall() {
  const [state, setState] = useState<PWAInstallState>({
    isInstallable: false,
    isInstalled: false,
    isStandalone: false,
    isIOS: false,
    isAndroid: false,
    isChrome: false,
    isSafari: false,
    showInstallPrompt: false,
    installPrompt: null,
  });

  // Î∏åÎùºÏö∞Ï†Ä Í∞êÏßÄ
  const detectBrowser = useCallback(() => {
    const userAgent = navigator.userAgent;
    const isIOS = /iPad|iPhone|iPod/.test(userAgent);
    const isAndroid = /Android/.test(userAgent);
    const isChrome = /Chrome/.test(userAgent) && !/Edge/.test(userAgent);
    const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
    const isStandalone =
      window.matchMedia('(display-mode: standalone)').matches ||
      (window.navigator as any).standalone === true;

    console.log('üîç Î∏åÎùºÏö∞Ï†Ä Í∞êÏßÄ:', {
      userAgent,
      isIOS,
      isAndroid,
      isChrome,
      isSafari,
      isStandalone,
      displayMode: window.matchMedia('(display-mode: standalone)').matches,
      navigatorStandalone: (window.navigator as any).standalone,
    });

    return { isIOS, isAndroid, isChrome, isSafari, isStandalone };
  }, []);

  // PWA ÏÑ§Ïπò ÏÉÅÌÉú ÌôïÏù∏
  const checkInstallStatus = useCallback(() => {
    const browser = detectBrowser();
    const isInstalled =
      browser.isStandalone || localStorage.getItem('pwa-installed') === 'true';

    console.log('üì± PWA ÏÑ§Ïπò ÏÉÅÌÉú ÌôïÏù∏:', {
      browser,
      isInstalled,
      localStorage: localStorage.getItem('pwa-installed'),
    });

    setState((prev) => ({
      ...prev,
      ...browser,
      isInstalled,
    }));
  }, [detectBrowser]);

  // ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleBeforeInstallPrompt = useCallback((e: Event) => {
    console.log('üéâ beforeinstallprompt Ïù¥Î≤§Ìä∏ Î∞úÏÉù!', e);
    e.preventDefault();
    const event = e as BeforeInstallPromptEvent;

    console.log('üì¶ ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ ÏÑ§Ï†ï:', {
      platforms: event.platforms,
      event,
    });

    setState((prev) => ({
      ...prev,
      isInstallable: true,
      installPrompt: event,
      showInstallPrompt: true,
    }));
  }, []);

  // Ïï± ÏÑ§ÏπòÎê® Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleAppInstalled = useCallback(() => {
    localStorage.setItem('pwa-installed', 'true');
    setState((prev) => ({
      ...prev,
      isInstalled: true,
      isInstallable: false,
      showInstallPrompt: false,
      installPrompt: null,
    }));
  }, []);

  // PWA ÏÑ§Ïπò Ïã§Ìñâ
  const installPWA = useCallback(async () => {
    if (state.installPrompt) {
      // Chrome/Edge Îì±Ïùò beforeinstallprompt Ïù¥Î≤§Ìä∏ ÏÇ¨Ïö©
      await state.installPrompt.prompt();
      const choiceResult = await state.installPrompt.userChoice;

      if (choiceResult.outcome === 'accepted') {
        handleAppInstalled();
      }
    } else if (state.isIOS && state.isSafari) {
      // iOS SafariÏùò Í≤ΩÏö∞ ÏàòÎèô ÏïàÎÇ¥
      alert(
        'iOS SafariÏóêÏÑú PWAÎ•º ÏÑ§ÏπòÌïòÎ†§Î©¥:\n1. ÌïòÎã® Í≥µÏú† Î≤ÑÌäºÏùÑ ÌÉ≠ÌïòÏÑ∏Ïöî\n2. "Ìôà ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä"Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'
      );
    } else if (state.isAndroid && state.isChrome) {
      // Android ChromeÏùò Í≤ΩÏö∞ ÏàòÎèô ÏïàÎÇ¥
      alert(
        'Android ChromeÏóêÏÑú PWAÎ•º ÏÑ§ÏπòÌïòÎ†§Î©¥:\n1. Ï£ºÏÜåÏ∞Ω ÏòÜ Î©îÎâ¥ Î≤ÑÌäºÏùÑ ÌÉ≠ÌïòÏÑ∏Ïöî\n2. "Ìôà ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä"Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'
      );
    }
  }, [
    state.installPrompt,
    state.isIOS,
    state.isSafari,
    state.isAndroid,
    state.isChrome,
    handleAppInstalled,
  ]);

  // ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ Ïà®Í∏∞Í∏∞
  const dismissInstallPrompt = useCallback(() => {
    setState((prev) => ({
      ...prev,
      showInstallPrompt: false,
    }));
  }, []);

  useEffect(() => {
    console.log('üöÄ usePWAInstall ÌõÖ Ï¥àÍ∏∞Ìôî');

    // PWA ÏöîÍµ¨ÏÇ¨Ìï≠ Ï≤¥ÌÅ¨
    console.log('üîç PWA ÏöîÍµ¨ÏÇ¨Ìï≠ Ï≤¥ÌÅ¨:', {
      isHTTPS:
        location.protocol === 'https:' || location.hostname === 'localhost',
      hasManifest: !!document.querySelector('link[rel="manifest"]'),
      hasServiceWorker: 'serviceWorker' in navigator,
      serviceWorkerRegistration: navigator.serviceWorker?.controller,
    });

    // Service Worker Îì±Î°ù ÏÉÅÌÉú ÌôïÏù∏
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.getRegistrations().then((registrations) => {
        console.log('üîß Service Worker Îì±Î°ù ÏÉÅÌÉú:', {
          registrations: registrations.length,
          controllers: registrations.map((reg) => reg.active?.scriptURL),
        });
      });
    }

    // PWA ÏÑ§Ïπò Ï°∞Í±¥ ÏÉÅÏÑ∏ Ï≤¥ÌÅ¨
    const checkPWAInstallability = async () => {
      const manifestLink = document.querySelector('link[rel="manifest"]');
      if (manifestLink) {
        try {
          const manifestResponse = await fetch(
            manifestLink.getAttribute('href')!
          );
          const manifest = await manifestResponse.json();
          console.log('üìã Manifest ÎÇ¥Ïö©:', manifest);

          // Manifest ÌïÑÏàò ÌïÑÎìú Ï≤¥ÌÅ¨
          const requiredFields = [
            'name',
            'short_name',
            'start_url',
            'display',
            'icons',
          ];
          const missingFields = requiredFields.filter(
            (field) => !manifest[field]
          );
          console.log('üìã Manifest ÌïÑÏàò ÌïÑÎìú Ï≤¥ÌÅ¨:', {
            requiredFields,
            missingFields,
            hasAllRequired: missingFields.length === 0,
          });
        } catch (error) {
          console.error('‚ùå Manifest Î°úÎìú Ïã§Ìå®:', error);
        }
      }

      // Î∏åÎùºÏö∞Ï†ÄÎ≥Ñ PWA ÏßÄÏõê Ï≤¥ÌÅ¨
      console.log('üåê Î∏åÎùºÏö∞Ï†Ä PWA ÏßÄÏõê Ï≤¥ÌÅ¨:', {
        hasBeforeInstallPrompt: 'onbeforeinstallprompt' in window,
        hasAppInstalled: 'onappinstalled' in window,
        userAgent: navigator.userAgent,
        isSecureContext: window.isSecureContext,
      });
    };

    checkPWAInstallability();

    // Ï¥àÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
    checkInstallStatus();

    // Chrome/EdgeÏùò beforeinstallprompt Ïù¥Î≤§Ìä∏
    console.log('üëÇ beforeinstallprompt Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù');
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // Ïï± ÏÑ§Ïπò ÏôÑÎ£å Ïù¥Î≤§Ìä∏
    console.log('üëÇ appinstalled Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù');
    window.addEventListener('appinstalled', handleAppInstalled);

    // beforeinstallprompt Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞Î•º ÏúÑÌïú Ìè¥Î∞±
    const fallbackTimer = setTimeout(() => {
      console.log(
        '‚è∞ beforeinstallprompt Ïù¥Î≤§Ìä∏ ÌÉÄÏûÑÏïÑÏõÉ - ÏàòÎèô ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ ÌôúÏÑ±Ìôî'
      );
      const browser = detectBrowser();

      // PWA ÏöîÍµ¨ÏÇ¨Ìï≠Ïù¥ Ï∂©Ï°±ÎêòÏóàÏßÄÎßå beforeinstallpromptÍ∞Ä Î∞úÏÉùÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
      if (!state.isInstallable && !state.isInstalled && !state.isStandalone) {
        console.log('üîÑ ÏàòÎèôÏúºÎ°ú ÏÑ§Ïπò ÌîÑÎ°¨ÌîÑÌä∏ ÌôúÏÑ±Ìôî');
        setState((prev) => ({
          ...prev,
          isInstallable: true,
          showInstallPrompt: true,
        }));
      }
    }, 3000); // 3Ï¥à ÌõÑ Ìè¥Î∞± Ïã§Ìñâ

    // display-mode Î≥ÄÍ≤Ω Í∞êÏßÄ (PWAÎ°ú Ï†ÑÌôòÎê®ÏùÑ Í∞êÏßÄ)
    const mediaQuery = window.matchMedia('(display-mode: standalone)');
    const handleDisplayModeChange = () => {
      console.log('üì± display-mode Î≥ÄÍ≤Ω Í∞êÏßÄ');
      checkInstallStatus();
    };

    mediaQuery.addEventListener('change', handleDisplayModeChange);

    // ÌòÑÏû¨ ÏÉÅÌÉú Î°úÍ∑∏
    console.log('üìä ÌòÑÏû¨ PWA ÏÉÅÌÉú:', {
      isInstallable: state.isInstallable,
      isInstalled: state.isInstalled,
      isStandalone: state.isStandalone,
      showInstallPrompt: state.showInstallPrompt,
      installPrompt: !!state.installPrompt,
    });

    return () => {
      console.log('üßπ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨');
      clearTimeout(fallbackTimer);
      window.removeEventListener(
        'beforeinstallprompt',
        handleBeforeInstallPrompt
      );
      window.removeEventListener('appinstalled', handleAppInstalled);
      mediaQuery.removeEventListener('change', handleDisplayModeChange);
    };
  }, [checkInstallStatus, handleBeforeInstallPrompt, handleAppInstalled]);

  return {
    ...state,
    installPWA,
    dismissInstallPrompt,
    checkInstallStatus,
  };
}
